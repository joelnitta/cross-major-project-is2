---
format:
  revealjs:
    incremental: false
    css: styles.css
execute: 
  echo: true
---

# RとRStudio入門

オンデマンド

<https://joelnitta.github.io/cross-major-project-is2/>

## 再現性とは？

. . .

- 他の人（**将来の自分**を含めて）があなたの解析を<br>**再度行って、同じ結果**を得ることができること

- データサイエンスにおいて、**とても重要**。再現性がなければ、「サイエンス」にならない！

## 再現可能にするには・・

- **コード**が必要
  - 自分が何をやったのか、記録が残る
  - 将来、同じ解析ができる

- コードとして残らない方法はよろしくない（エクセル、SPSSなど）

## 本授業では、Rを使う

:::: {.columns}

::: {.column width="50%"}
- 無料
- データ解析の機能が豊富
- 多様なニーズに応えるパッケージ
- コミュニティー
:::

::: {.column width="50%"}
![](images/r_uses_crop.png)

[<https://www.linkedin.com/pulse/why-r-4-reason-learn-programming-language-business-corporate>]{.tiny}
:::

::::

## RとRStudioについて

:::: {.columns}

::: {.column width="50%"}
- Rとは「R Project for Statistical Computing」という組織が提供しているオープンソースプログラミング言語
:::

::: {.column width="50%"}
![](https://www.r-project.org/logo/Rlogo.svg)
:::

::::

## RとRStudioについて

:::: {.columns}

::: {.column width="50%"}
- Rのコードを書く・実行する最適なソフト（無料）
- RStudioなしでもRは一応使えるけど、不便
- **この授業ではRStudioを介してRを使う。**
:::

::: {.column width="50%"}
![](https://posit.co/wp-content/uploads/2022/10/thumbnail-3.jpg)
:::

::::

## Rのインストール

<https://cloud.r-project.org/>から自分のOSに合ったファイルをダウンロードして、インストール

## RStudioのインストール

<https://posit.co/download/rstudio-desktop/>から自分のOSに合ったファイルをダウンロードして、インストール

## 困ったら・・

ご連絡下さい（<joelnitta@chiba-u.jp>）


## RStudioの使い方

- 主に四つの**パネル**がある
  - Source（コードを書く）
  - Environment（今のRのセッションに入っているオブジェクトが表示される）
  - R Console（Rに直接コマンドをする）
  - Files and Plots（ファイルと図）

---

![](images/rstudio_labeled.png)

## Rを計算機として使う

- RStudioのコンソール（左下のパネル）にカーソルを置いて、簡単な計算をしてみましょう：

::: large

```{r}
2 * 20
```

:::

おめでとうございます！Rプログラミングができました！

## オブジェクト（変数）について

- 次に、Rの中のデータを変数（Rでは、「オブジェクト Object」と呼ぶ）として保存しよう：

::: large

```{r}
age <- 2 * 20
```

:::

## オブジェクト（変数）について

これだけでは何も返ってこない。

変数の内容を確認するには、コンソールにその変数の名前を打てば良い：

::: large

```{r}
age
```

:::

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは

関数の書き方：

- 関数名(引数)

例えば

::: large

```{r}
round(3.1415, digits = 1)
```

:::

## 関数とは

関数の使い方を確認したい時は`?関数名`と打って、ヘルプファイルを参照すれば良い

::: large

```{r}
#| eval: false
?round
```

:::

## パッケージとは

- Rパッケージとは、Rが出来ることを大幅に増やす「追加」のソフト（関数のまとまり）
  - 現在、**２万**近くのパッケージがある！

## パッケージのインストール

Rパッケージのインストールを行うには、`install.packages()`を使う：

```{r}
#| label: install
#| echo: true
#| eval: false
install.packages("ggplot2")
```

一回インストールしたら、次回からはしなくて良いので、これはコードとして保存しない

## パッケージのロード

- パッケージをインストールしたら、使える状態するにはロードすることが必要
  - インストールは一回でいい
  - ロードは毎回必要

`library()`関数でロードする：

::: large

```{r}
library(ggplot2)
```

:::

## tidyverse

- `tidyverse`はデータサイエンス用パッケー**ジの集まり**のパッケージ
  - `ggplot2`（可視化）
  - `dplyr`（データの整理）
  - `stringr`（文字データを扱う）
  - など

これからよく使うので、インストールしましょう。一気に出来るから、楽。

```{r}
#| label: install-tidyverse
#| echo: true
#| eval: false
install.packages("tidyverse")
```

## `install.packages()`と`library()`の違い

- `install.packages()`は一回だけで良い（パソコンにパッケージをダウンロードする）

- `library()`はRを使う毎にしないといけない（パッケージを今回のRのセッションで使えるようにする）

## プロジェクトについて

- スクリプトとデータを**整理する必要がある**

- RStudioの**「Project」機能**によって、スクリプトとデータ（など）の整理ができる

## 新しいプロジェクトを作る

- `File` ➡︎ `New Project` ➡︎ `New Directory` ➡︎ `New Project` をクリック
  - **プロジェクト名**と**場所**を入力（今回は`green-roof`にしましょう）
  - 分かりやすい場所がおすすめ（デスクトップにしましょう）

- 今回は"Create a git repository"をクリックしないけど、本当はgitも使った方がいい（またあとで説明します）

---

![](images/new_project.png)

## 新しいプロジェクトを作る 

- プロジェクト名の入力が終わると、RStudioが再度立ち上がる

- ファイルパネル（右下）をよく見てください。今はRがどこに「います」か？

## 新しいプロジェクトを作る

- 右下の「ファイル」パネルを使って、`data`というフォルダーを作りましょう
  - あとで、このフォルダーに**これから解析するデータを置く**

![](images/new_folder.png)

## .Rprojファイルについて

- 新しいプロジェクトには、`green-roof.Rproj`ファイルが入っている

- `.Rproj`ファイルの中身はは基本的に**触らない**
  - 中身はRStudioの設定（RStudioに任せましょう）
  - 再度プロジェクトを開く時に使う（ダブルクリック）

![](images/rproj_icon.png)

## スクリプトについて

- 今までは直接Rにコマンドを出していたけど、毎回そうするのは効率が良くない。

- 作業を繰り返す場合や再現する場合は**スクリプト**(テキストファイル)が必要。

- Rスクリプトの拡張は`.R`か`.r`。

## スクリプトの作成と保存

- 作成
  - `File` ➡︎ `New File` ➡︎ `R Script`をクリック

- 保存
  - `File` ➡︎ `Save As...`をクリックかファイルのアイコンをクリック。

- スクリプトの名前はなるべくローマ字を使うように（あとあと公開する時のため）

## スクリプトからコードを使う

以下のコードをスクリプトに書いて、`script.R`としてデスクトップに保存しましょう（コードの詳細はまた後で学ぶ）。

```r
library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()
```

## スクリプトからコードを使う

- カーソルが現在位置している行をコンソールに送る：<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Enter</kbd>

- 今開いているスクリプトの行を**全て**コンソールに送る：<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Shift</kbd>+ <kbd class="kbc-button">Enter</kbd>

## RStudioによる警告

スクリプトに間違いが入っている場合、RStudioはそれを教えてくれる（バツマークと赤い線）：

![](https://docs.posit.co/ide/user/ide/guide/code/images/error-missing-comma.png){height="200"}

## プロジェクトにスクリプトを置きましょう

以下のコードを書いて、スクリプトを`diamonds.R`として`green-roof`プロジェクトに保存して、実行しましょう：

```{r}
#| eval: false
library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()

ggsave("diamonds.png")
```

このスクリプトは何をするのでしょうか？

## コードによる再現性

- `diamonds.R`は`diamonds.png`というグラフを作る。

. . .

- `diamonds.png`を消しましょう。

. . .

- 解析結果が消えてしまった！どうしよう！？

## コードによる再現性

- ご心配なく！
  - 再度`diamonds.R`を実行してください（<kbd class="kbc-button">Ctrl</kbd>（あるいは<kbd class="kbc-button">⌘</kbd>） + <kbd class="kbc-button">Shift</kbd>+ <kbd class="kbc-button">Enter</kbd>）

- 全く同じグラフが再度できた！つまり、**再現**しました。

. . .

- **コードとデータがあれば、解析結果はいつでも再現できる**

. . .

- 絶対に必要なのは、**コード**と**データ**。結果は「使い捨て」と考えて良い。

## データの読み込み

- まずは練習としてからグーグドライブから`students.csv`をダウンロードして、`data/`に置きましょう。

- `.csv`は**c**omma **s**eparated **v**aluesの略です
  - エクセルで扱うようなデータ形式（エクセルでも開くことができる）
  - `.xslx`との違いは、`.csv`はそのままどのテキストエディターでも開ける（エクセルがいらない）

## データの読み込み

- `read_csv()`関数で読み込む

まずは、読み込んでから直接に中身を見てみましょう：

```{r}
#| echo: false
#| message: false
#| warning: false
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
read_csv("data/students.csv")
```

## 読み込んだデータの保存

- でも、これだけではRの環境にそのデータが**入っていません**

- 変数（オブジェクト）として保存する必要がある：

```{r}
students <- read_csv("data/students.csv")
```

---

![](images/students_data_in_env.png)

---

- このようにRに読み込んだデータを**データフレーム**（"dataframe"）、あるいは「tibble」と呼ぶ
  - ２次元データ。エクセルのデータシートみたいな物。

## 読み込んだデータの中身の確認（１）

- 変数として保存する時は中身が見えない（オブジェクトに渡された）

- 中身を見たい時は**変数名を直接コンソールに入力**すればいい

```{r}
students
```

## コンソールの使い方（使うとき）

- このような時に使う：データの中身を確認したい、ヘルプファイルを開きたい、など。

- つまり、**データ解析に必要ではない**（関係のない）コマンド。

## 読み込んだデータの中身の確認（２）

- もう一つのデータの確認の仕方がある：「Environment」パネルでそのオブジェクトをクリック

- すると、エクセルのようなレイアウトになる
  - エクセルと大きな違い：直接にデータをいじることができない！

. . .

- **エクセルはデータ入力に使う。Rはデータ解析に使う**

---

![](images/students_data_view.png)

## データの種類（型）について

- `students`をコンソール（左下のパネル）でもう一回打ってみてください

- データの上に`<dbl>`とか`<chr>`とかと出ているけど、これは何でしょうか？

. . .

- A: データの**種類**です

## データの種類（型）について

- `dbl`: 数字（"double"の略。なぜ"double"でしょう・・）
- `chr`: 文字（"character"の略。この方がしっくり来るね）

このほかに、

- `lgl`：ロジカル（`TRUE`か`FALSE`か、そのどっちか）
- `int`：整数（"integer"の略）

がある

## ベクトルについて

- **ベクトル**（vector）とは、**同じ型を持つ一**連のデータの集まり（一次元の配列）

- ベクトルに含まれている一つ一つのデータを**要素**（element）という

- 例えば、`letters`
  - `"a"`が`letters`の１個目の要素

## ベクトルの作り方

- ベクトルを関数は`c()`
  - "combine"（「くっつける」）の略

```{r}
c(1, 2, 3)
```

## ベクトルの作り方

- 文字列（文字でできているベクトル）を作るときは、引用符をつけないといけない

```{r}
c("a", "b", "c")
```

## ベクトルの型の確認

- `typeof()`関数でベクトルの型を確認することができる

```{r}
typeof(letters)
```

## チャレンジ

- 以下のコードでベクトルを作ると、そのベクトルの型は何でしょうか？

```{r}
#| eval: false
c(1, 2, "c")
```

## ベクトル変換

- 先も言いましたが、あるベクトルの要素は全て同じ型を持たないといけない

- なので、入力が複数の型を含む場合、Rはそれを同じ型に合わせる

```{r}
x <- c(1, 2, "c")
typeof(x)
```

- 先のベクトルは**文字**に変換された

## ベクトル型とデータフレーム

- データフレームの列は、本当は**ベクトル**になっている

- なので、データフレームの列はそれぞれ、**型が決まっている**
  - これはエクセルと大きな違い

![](images/dataframe.png)

## まとめ

- スクリプト（.Rファイル）に解析に必要な**コードを書く**

- スクリプトとデータがあれば、解析結果を**再現できる**

- **プロジェクト**を使うと、解析の管理が大幅にやりやすくなる

- **データフレーム**はベクトルからなっている

- **ベクトル**は一つの型しか持てない

# データの可視化

<https://joelnitta.github.io/cross-major-project-is2/>

## 生データ

- [グーグルドライブ](https://docs.google.com/spreadsheets/d/1gjJJ3PdTS4EbhaEjm1Ir1M6c2j8KNTug/edit?usp=sharing&ouid=111421972632677423000&rtpof=true&sd=true)から「2025とりまとめ」データを`屋上はらっぱ植生調査 - 2025 とりまとめ.csv`としてダウンロードして、`data/`に置いて下さい（生データ）

- 「生データ」とは収集された元のデータであり、**読み込み専用**で扱う。
  - データの整合性を保持し、誤改変を防ぐためである。

- コード以外のツールで編集すると、変更履歴が残らず、データの再現性や透明性が損なわれる。

## tidyなデータ

- 各列が変数を表している
- 各行が観察を表している
- 各セルが一つの値を表している

![](https://r4ds.hadley.nz/images/tidy-1.png)

## tidyなデータ

- 前回に読み込んだ`students.csv`はtidyなデータ：

```{r}
#| echo: false
read_csv("data/students.csv")
```

## データの読み込み

- 必要なパッケージをロードする

- このコードを`roof-survey.R`として保存

```{r}
#| eval: false
#| filename: roof-survey.R
library(tidyverse)
library(ggthemes) # プロットの色合いの設定に使う
```

## データの読み込み

```{r}
read_csv("data/屋上はらっぱ植生調査 - 2025 とりまとめ.csv")
```

うまく行かない（全然tidyじゃない）

## データクレンジング

- 生データを**tidy**（解析可能）なデータに整える必要があるけど、今は説明する時間がないので、私が用意したスクリプト（`.R`ファイル）を使う。

- `data_cleaning_2025.R`を[ダウンロード](https://drive.google.com/file/d/1ORpHZd1ksqTWkcDec9OtNj6cz13sY2in/view?usp=drive_link)して、このプロジェクトに保存してください。

- `data_cleaning_2025.R`を開いて、実行すると、`data/okujo_2025.csv`が出力される

- `data/okujo_2025.csv`を読み込む

---

```{r}
#| filename: roof-survey.R
#| message: false
#| eval: false
library(tidyverse)
library(ggthemes) # プロットの色合いの設定に使う

okujo <- read_csv("data/okujo_2025.csv")
```

```{r}
#| filename: roof-survey.R
#| message: false
#| eval: true
#| echo: false
library(tidyverse)
library(ggthemes) # プロットの色合いの設定に使う

okujo <- read_csv("data/okujo_2024.csv")
```

これでデータの解析（可視化）ができる状態になった。

## ggplot2について

- Rには備え付けの関数、`plot()`があるが、今回は`tidyverse`の`ggplot2`パッケージを使う

- `gg` = "**G**rammar of **G**raphics"（画像の文法）
  - 「文法」が分かれば、（ほとんど）<br>どんな図でも作れる

## 参考情報

- [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)

- [Tokyo Rのスラック](https://github.com/tokyor/r-wakalang)

- chatGPT（相当なトレーニングデータがあるはず）
  - でも何も知らないでは上手く行かない

![](../images/slack.png)

## ggplot2について

図の構造にはいくつか**決まった要素**がある

- **geometry**: 図はどのような**形**にする？

- **aesthetics**: データをどのように図に**表す**？

## Geometry

:::: {.columns}

::: {.column width="50%"}
Pie chart
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
Bar graph
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/proportional-ink.html
:::
::::

## Aesthetics

<img src="https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/common-aesthetics-1.png" alt="drawing" height="250">

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/aesthetic-mapping.html
:::
::::

## 目的：このグラフを作る

```{r}
#| echo: false
ggplot(okujo, aes(x = plot, y = cover, color = plot)) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  ) +
  scale_color_colorblind() +
  theme(legend.position = "none")
```

## `ggplot()`でグラフの基盤を作る

```{r}
#| output-location: column
ggplot(data = okujo)
```

## `mapping()`で座標を指定する

```{r}
#| output-location: column
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover
  )
)
```

## `mapping()`で座標を指定する

```{r}
#| output-location: column
#| code-line-numbers: "3-6"
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover
  )
)
```

## `geom_()`でデータの形を指定する

```{r}
#| output-location: column
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover
  )
) +
  geom_boxplot()
```

## `geom_()`でデータの形を指定する

```{r}
#| output-location: column
#| code-line-numbers: "7-8"
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover
  )
) +
  geom_boxplot()
```

## チャレンジ

`name_en`を横軸、`cover`を縦軸にして、箱ひげ図を作成して下さい

## `color`で色を潰す

```{r}
#| output-location: column
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot()
```

## `color`で色を潰す

```{r}
#| output-location: column
#| code-line-numbers: "6"
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot()
```

## 平均だけを見せるのでいい？

- グラフを作る際、平均だけを見せても大丈夫でしょうか？議論して下さい。

## 平均だけでは足りない

![](https://www.research.autodesk.com/app/uploads/2023/03/AllDinos-2.png){height=500}

::: {.aside}
<https://www.research.autodesk.com/publications/same-stats-different-graphs/>
:::

## 生データを付け加える

```{r}
#| output-location: column
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot() +
  geom_point()
```

## 生データを付け加える

```{r}
#| output-location: column
#| code-line-numbers: "10"
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot() +
  geom_point()
```

## 点が重なってしまう問題

- 英語で「overplotting」という

- 解決策：**グループ内**で適当にばらける
  - `geom_jitter()`
  - `jitter` = 「揺らぐ」、「ばらつく」

## 点が重なってしまう問題を`geom_jitter()`で解決

```{r}
#| output-location: column
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot() +
  geom_jitter()
```

## 点が重なってしまう問題を`geom_jitter()`で解決

```{r}
#| output-location: column
#| code-line-numbers: "10"
ggplot(
  data = okujo,
  mapping = aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot() +
  geom_jitter()
```


## よりもコンパクトな書き方

`data = `と`mapping = `を書かなくて良い

```{r}
#| output-location: column
ggplot(
  okujo,
  aes(
    x = plot,
    y = cover,
    color = plot
  )
) +
  geom_boxplot() +
  geom_jitter()
```


## `labs()`でラベルをきれいにする

```{r}
#| output-location: column
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  )
```

## `labs()`でラベルをきれいにする

```{r}
#| output-location: column
#| code-line-numbers: "7-12"
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  )
```

## `scale_`で色を調整する

- 色覚異常の方に配慮したデザインを心がけよう

```{r}
#| output-location: column
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  ) +
  scale_color_colorblind()
```

## `scale_`で色を調整する

- 色覚異常の方に配慮したデザインを心がけよう

```{r}
#| output-location: column
#| code-line-numbers: "13"
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  ) +
  scale_color_colorblind()
```

## 凡例を隠す

- プロットは文字と位置で分かるから、色の説明はいらない

- `theme()`でグラフ全体の見た目（スタイル）を調整する

## `theme()`で凡例を隠す

```{r}
#| output-location: column
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  ) +
  scale_color_colorblind() +
  theme(legend.position = "none")
```

## `theme()`で凡例を隠す

```{r}
#| output-location: column
#| code-line-numbers: "13"
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Plant cover in roof-top green spaces",
    y = "Cover",
    x = "Plot",
    color = "Plot"
  ) +
  scale_color_colorblind() +
  theme(legend.position = "none")
```

# できました！

## おまけ①：`base_family`で文字化けを防ぐ

```{r}
#| output-location: column
#| code-line-numbers: "15"
ggplot(
  okujo,
  aes(x = plot,　y = cover,　color = plot)
) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "屋上緑地における植物の被度",
    y = "被度",
    x = "プロット",
    color = "プロット"
  ) +
  scale_color_colorblind() +
  theme_gray(base_family = "HiraKakuPro-W3") +
  theme(legend.position = "none")
```

## おまけ②：`ggsave()`でグラフを保存する

```{r}
#| eval: false
ggsave("okujo.png")
```
